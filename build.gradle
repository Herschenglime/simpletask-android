buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}

apply plugin: 'com.android.application'

sourceSets {
        unitTest {
                java.srcDir file('src/test/java')
                resources.srcDir file('src/test/resources')
        }
}

dependencies {
        unitTestCompile files("$project.buildDir/intermediates/classes/cloudless/debug")
        unitTestCompile fileTree(dir: 'libskeep', include: '*.jar')
        unitTestCompile 'com.darwinsys:hirondelle-date4j:1.5.1'
        unitTestCompile 'com.google.guava:guava:17.0'
        unitTestCompile 'com.google.android:android:4.+'
        unitTestCompile 'junit:junit:4.11'
        unitTestCompile 'org.easymock:easymock:3.2'
}

configurations {
        unitTestCompile.extendsFrom runtime
        unitTestRuntime.extendsFrom unitTestCompile
}

task unitTest(type:Test, dependsOn: assemble) {
        description = "run unit tests"
        testClassesDir = project.sourceSets.unitTest.output.classesDir
        classpath = project.sourceSets.unitTest.runtimeClasspath + files("$project.buildDir/intermediates/classes/cloudless/debug")
}

task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    ext.revision = proc.text.trim()
    ext.timestamp = (int)(new Date().getTime()/1000)
}

task checkCleanGit {
    def cmd = "git diff-files"
    def proc = cmd.execute()
    ext.status = proc.text.trim()
    doLast {
       if (!(ext.status == ""))
          throw new GradleException("Git not clean, commit changes before running serve:\n" + ext.status)
    }
}

task serve(type:Copy, dependsOn: [assembleRelease,buildInfo,checkCleanGit]) {
    from 'build/outputs/apk/'
    into servePath + '/master/'
    include '**/*' + buildInfo.ext.revision  + '*release.apk'
}

android {


    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }

    buildToolsVersion "20.0.0"
    compileSdkVersion 20

    defaultConfig {
        versionName '5.2.5'
        versionCode 1533
	    minSdkVersion 14
        targetSdkVersion 20
        buildConfigField "String", "GIT_REV", "\"" + buildInfo.ext.revision + "\""
    }

    project.ext.set("archivesBaseName", "simpletask-" + buildInfo.ext.revision);

    productFlavors {
        free {
            applicationId 'nl.mpcjanssen.todotxtholo'
        }
        cloudless {
            applicationId 'nl.mpcjanssen.simpletask'
        }
    }

    signingConfigs {
        release {
            keyAlias = "mpcjanssen.nl"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    freeCompile fileTree(dir: 'libs', include: '*.jar')
    compile fileTree(dir: 'libskeep', include: '*.jar')
    compile 'com.intellij:annotations:+@jar'
    compile 'com.android.support:support-v4:20.0.0'
    compile 'org.commonjava.googlecode.markdown4j:markdown4j:2.2-cj-1.0'
    compile 'com.darwinsys:hirondelle-date4j:1.5.1'
    compile 'com.google.guava:guava:17.0'
}
check.dependsOn unitTest
preBuild.dependsOn buildInfo

// Only sign if we have keystore properties in the gradle.properties in ~/.gradle
if (project.hasProperty('storeFile') &&
        project.hasProperty('storePassword') &&
        project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}
